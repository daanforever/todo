require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and text expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific text.

describe TasksController do

  # This should return the minimal set of attributes required to create a valid
  # Task. As you add validations to Task, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { "text" => "MyString" }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TasksController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  context "without login" do
    it "should redirect to sign in page" do
      get :index, {}
      response.should redirect_to(new_user_session_path)
    end
  end

  context "after login" do

    login_user

    describe "GET index" do
      it "shold be success" do
        get :index
        response.should be_success
      end

      it "should be visible tasks only for current user" do
        # pending
        task1 = FactoryGirl.create(:task, :user => @user)
        task2 = FactoryGirl.create(:task, :user => FactoryGirl.create(:user))
        get :index
        assigns(:tasks).should include(task1)
        assigns(:tasks).should_not include(task2)
      end

      it "assigns all tasks as @tasks" do
        task = FactoryGirl.create(:task, :user => @user)
        get :index
        assigns(:tasks).should eq([task])
      end
    end # describe

    describe "GET show" do
      it "assigns the requested task as @task" do
        task = FactoryGirl.create(:task)
        get :show, {:id => task.to_param}
        assigns(:task).should eq(task)
      end
    end # describe
  
    describe "GET new" do
      it "assigns a new task as @task" do
        get :new
        assigns(:task).should be_a_new(Task)
      end
    end # describe

    describe "GET edit" do
      it "assigns the requested task as @task" do
        task = FactoryGirl.create(:task)
        get :edit, {:id => task.to_param}
        assigns(:task).should eq(task)
      end
    end # describe

    describe "POST create" do
      context "with valid params" do
        it "creates a new Task" do
          expect {
            post :create, {:task => valid_attributes}
          }.to change(Task, :count).by(1)
        end

        it "assigns a newly created task as @task" do
          post :create, {:task => valid_attributes}
          assigns(:task).should be_a(Task)
          assigns(:task).should be_persisted
        end

        it "redirects to the created task" do
          post :create, {:task => valid_attributes}
          response.should redirect_to(Task.last)
        end
      end

      context "with invalid params" do
        it "assigns a newly created but unsaved task as @task" do
          # Trigger the behavior that occurs when invalid params are submitted
          Task.any_instance.stub(:save).and_return(false)
          post :create, {:task => { "text" => "invalid value" }}
          assigns(:task).should be_a_new(Task)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          Task.any_instance.stub(:save).and_return(false)
          post :create, {:task => { "text" => "invalid value" }}
          response.should render_template("new")
        end
      end
    end # describe

    describe "PUT update" do
      context "with valid params" do
        it "updates the requested task" do
          task = FactoryGirl.create(:task)
          # Assuming there are no other tasks in the database, this
          # specifies that the Task created on the previous line
          # receives the :update_attributes text with whatever params are
          # submitted in the request.
          Task.any_instance.should_receive(:update_attributes).with({ "text" => "MyString" })
          put :update, {:id => task.to_param, :task => { "text" => "MyString" }}
        end

        it "assigns the requested task as @task" do
          task = FactoryGirl.create(:task)
          put :update, {:id => task.to_param, :task => valid_attributes}
          assigns(:task).should eq(task)
        end

        it "redirects to the task" do
          task = FactoryGirl.create(:task)
          put :update, {:id => task.to_param, :task => valid_attributes}
          response.should redirect_to(task)
        end
      end

      context "with invalid params" do
        it "assigns the task as @task" do
          task = FactoryGirl.create(:task)
          # Trigger the behavior that occurs when invalid params are submitted
          Task.any_instance.stub(:save).and_return(false)
          put :update, {:id => task.to_param, :task => { "text" => "invalid value" }}
          assigns(:task).should eq(task)
        end

        it "re-renders the 'edit' template" do
          task = FactoryGirl.create(:task)
          # Trigger the behavior that occurs when invalid params are submitted
          Task.any_instance.stub(:save).and_return(false)
          put :update, {:id => task.to_param, :task => { "text" => "invalid value" }}
          response.should render_template("edit")
        end
      end # context
    end # describe

    describe "DELETE destroy" do
      it "destroys the requested task" do
        task = FactoryGirl.create(:task)
        expect {
          delete :destroy, {:id => task.to_param}
        }.to change(Task, :count).by(-1)
      end

      it "redirects to the tasks list" do
        task = FactoryGirl.create(:task)
        delete :destroy, {:id => task.to_param}
        response.should redirect_to(tasks_url)
      end
    end # describe

  end # context

end
